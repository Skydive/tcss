#!/bin/bash
# PREPROCESSING....
CONTAINERS=( pgsql nginx php-fpm )
PREFIX="precess-io"

docker network create $PREFIX

declare -A CONTAINER_FRIENDLY_NAMES

for i in "${CONTAINERS[@]}"; do
	CONTAINER_FRIENDLY_NAMES[$i]="$PREFIX-$i"
done

function containerid() {
	echo $(docker container ls -a | grep $1 | awk '{print $1}')
}

function imageid() {
	echo $(docker image ls | grep $1 | awk '{print $3}')
}
function shorttofull() {
	echo ${CONTAINER_FRIENDLY_NAMES[$1]}
}

function fulltoshort() {
	for k in "${!CONTAINER_FRIENDLY_NAMES[@]}"; do
		local v=${CONTAINER_FRIENDLY_NAMES[$k]}
		if [ "$v" = "$1" ]; then
			echo $k 
			return
		fi
	done
}
# IMAGE FNCS
# CONTAINER FNCS
function name_valid() {
	if [ -z "$1" ]; then
		return 1
	fi

	if [[ "${CONTAINER_FRIENDLY_NAMES[@]}" =~ "$1" ]]; then
		return 0
	fi
	return 1
}
function image_valid() {
	IMAGE_ID=$(imageid $1)
	if [ ! -z "$IMAGE_ID" ]; then
		return 0
	fi
	return 1
}
function container_valid() {
	CONTAINER_ID=$(containerid $1)
	if [ ! -z "$CONTAINER_ID" ]; then
		return 0
	fi
	return 1
}
function container_stopped() {
	STOPPED_OUT=$(docker container ls -af "status=exited" | grep $1)
	if [ ! -z "$STOPPED_OUT" ]; then
		return 0
	fi
	return 1
}
# COMMANDS FNCS $1 - container shortnames
function command_restart() {
	if container_valid $1; then
		command_stop $1
	fi
	if ! name_valid $1; then
		echo "Invalid name $1"
		return;
	fi
	command_start $1
}
function command_stop() {
	if container_valid $1; then
		echo "Stopping container: $1"
        docker rm -f $(containerid $1)
		return;
	fi
	echo "Invalid container $1"
}
function command_remove() {
	if container_valid $1; then
		echo "Removing container: $1"
        docker rm -f $(containerid $1)
		return;
	fi
	echo "Invalid container $1"
}
function command_start() {
	if name_valid $1; then
		if ! image_valid $1; then
			command_build $1
		fi
		if container_valid $1; then
			if container_stopped $1; then
				echo "Restarting container: $1"
				docker restart $(containerid $1)	
				return;
			fi
			echo "Container $1 already running"
			return;
		fi
		short=$(fulltoshort $1)
		echo "Starting container from image: $1"
		$short/start $PREFIX $short
		return;
	fi
	echo "Invalid name $1"
}
function command_build() {
	if name_valid $1; then
		short=$(fulltoshort $1)
		docker build -t $1 $short
	fi
}
function command_del() {
	if image_valid $1; then
		if container_valid $1; then
			command_remove $1
		fi
		IMAGE_ID=$(imageid $1)
		docker rmi $IMAGE_ID
	fi
}

function command_list() {
	STATE="uninstalled"
	IMAGE_OUT=$(docker image ls -a | grep $1)
	if [ -n "$IMAGE_OUT" ]; then
		STATE="\e[96minstalled\e[39m"
	fi
	CONTAINER_OUT=$(docker container ls -a | grep $1)
	if [ -n "$CONTAINER_OUT" ]; then
		STATE="\e[92mrunning\e[39m"
	fi
	STOPPED_OUT=$(docker container ls -af "status=exited" | grep $1)
	if [ -n "$STOPPED_OUT" ]; then
		STATE="\e[31mstopped\e[39m"
	fi
	short=$(fulltoshort $1)
	echo -e "$short -> $STATE"
}

function command_help() {
	echo "list	- list containers"
	echo "state	- print status information of containers"
	echo "start	- start a container"
	echo "stop	- stop a container"
	echo "build	- build a container"
	echo "del	- delete a container"
	echo "quit	- quit the program"
}

# MAIN LOOP
declare -A COMMAND_LIST=(
	["start"]=command_start
	["stop"]=command_stop
	["disable"]=command_remove
	["restart"]=command_restart
	["build"]=command_build
	["del"]=command_del
	["list"]=command_list
	["help"]=commmand_help
)

command_parser() {
	if [ -z "$1" ]; then
		return
	fi
	# CHECK VALID CMD
	if [ "$2" = "all" ]; then
		for i in "${CONTAINERS[@]}"; do 
			command_parser $1 $i
		done
		return
	fi

	for k in "${!COMMAND_LIST[@]}"; do 
		local v=${COMMAND_LIST[$k]}
		if [ "$k" = "$1" ]; then
			for n in ${@:2}; do 
				$v ${CONTAINER_FRIENDLY_NAMES[$n]}
			done
			return;
		fi
	done
	echo "Command $1 does not exist";
}


cd "$(dirname "$0")"
CURRENT_COMMAND=""

echo -e "\e[92mWelcome to Skystack!\e[39m"
while [ "$CURRENT_COMMAND" != "quit" ]; do
	command_parser $CURRENT_COMMAND
	echo -ne "\e[96m[$PREFIX]\e[39m: "
	read CURRENT_COMMAND
done
echo "Bye!"
